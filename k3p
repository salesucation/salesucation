#!/bin/bash

# get hostname for target machine
echo -n "please enter your email so that we can follow up and see how it is going: "
read EMAIL

# get hostname for target machine
echo -n "please set up a DNS cname or A record for this installation and provide it here: "
read HOSTNAME



# create non root user with sudo privileges
if [ $(id -u) -eq 0 ]; then
    echo -n "This installation is not meant to run as root ... enter non root username with passwordless sudo: "
    read USERNAME
    if [ ! -d /home/$USERNAME ]; then
        useradd $USERNAME -u 1000 --shell "/bin/bash" && echo "$USERNAME:$USERNAME" | chpasswd && adduser $USERNAME sudo
        sed -i /etc/sudoers -re 's/^%sudo.*/%sudo   ALL=(ALL:ALL) NOPASSWD: ALL/g'
        mkdir /home/$USERNAME
        chown $USERNAME:$USERNAME /home/$USERNAME
        usermod -a -G docker $USERNAME

        echo 'You will still need to set up some authorized_keys'
        echo 'Also please sefile.zipt `PermitRootLogin no`'
        echo '`PasswordAuthentication no` and `ChallengeResponseAuthentication no`'
    fi
fi

#install a kubernetes
if ! kubectl get ns default >/dev/null 2>&1; then
    echo "Installing a kubernetes"
    if [[ -v K8S ]]; then
        #k3d
        echo "installing k3d"
        curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
        k3d cluster create k3d-cluster --k3s-arg "--disable=traefik@server:0" --volume $PWD/data:/var/data
        # kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin
    else
        #k3s
        echo "installing k3s"
        curl -sfL https://get.k3s.io | sh -s - --disable traefik --write-kubeconfig-mode 644
    fi
fi

# install helm

curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# install knative

kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-crds.yaml
kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-core.yaml

sleep 3
echo "Wait for knative"
kubectl wait pod --all --for=condition=Ready --namespace=knative-serving

# install networking
kubectl apply -f https://github.com/knative/net-kourier/releases/download/knative-v1.17.0/kourier.yaml

sleep 3
echo "wait for kourier"
kubectl wait pod --all --for=condition=Ready --namespace=kourier-system

kubectl patch configmap/config-network --namespace knative-serving --type merge --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}'

CMD="kubectl patch configmap/config-domain --namespace knative-serving --type merge --patch '{\"data\":{\""
CMD+=$HOSTNAME
CMD+="\":\"\"}}'"
eval $CMD


if [[ -v K8S ]]; then
    #k3d
    kubectl patch --namespace knative-serving configmap/config-features --type merge --patch '{"data":{"kubernetes.podspec-persistent-volume-claim": "enabled", "kubernetes.podspec-persistent-volume-write": "enabled"}}'
    kubectl apply -f https://raw.githubusercontent.com/salesucation/k3p/main/persistent.yaml
    kubectl patch storageclass local-path -p '{"allowVolumeExpansion": true}'
else    
    #k3s
    kubectl apply -f https://github.com/knative/net-http01/releases/download/knative-v1.12.0/release.yaml
    sleep 3
    echo "wait for net-http01"
    kubectl wait pod --all --for=condition=Ready --namespace=knative-serving
    kubectl patch configmap/config-network --namespace knative-serving --type merge --patch '{"data":{"certificate-class":"net-http01.certificate.networking.knative.dev"}}'
    kubectl patch configmap/config-network --namespace knative-serving --type merge --patch '{"data":{"auto-tls":"Enabled"}}'
    sleep 3
    echo "wait for auto-tls"
    kubectl wait pod --all --for=condition=Ready --namespace=knative-serving
    # longhorn and prerequisites

    sudo apt update && sudo apt install open-iscsi nfs-common

    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.8.0/deploy/longhorn.yaml

    echo "wait for longhorn"
    kubectl wait pod --all --for=condition=Ready --namespace=longhorn-system
fi

# test ksvc

kubectl create namespace test
kubectl apply -f https://raw.githubusercontent.com/salesucation/k3p/main/hello.yaml

# add longhorn for knative

kubectl patch --namespace knative-serving configmap/config-features --type merge --patch '{"data":{"kubernetes.podspec-persistent-volume-claim": "enabled", "kubernetes.podspec-persistent-volume-write": "enabled"}}'
